<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ditto</name>
    </assembly>
    <members>
        <member name="P:Ditto.AbstractGlobalConventionConfiguration.Conventions">
            <summary>
            Injected conventions container
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="M:Ditto.Internal.SourceContext.SetDestinationContext(Ditto.Internal.IDescribeMappableProperty[])">
            <summary>
            Sets the destination context for this source. This selects <paramref name="destinationProperties"/> which are pertinent to this instance's
            <c>SourceType</c>. This selection is based upon matching property names. Use a Redirecting call in configuration to get around this.
            </summary>
            <param name="destinationProperties">The destination properties.</param>
        </member>
        <member name="M:Ditto.InternalTypeExtensions.IsFrameworkType(System.Type)">
            <summary>
            Shamelessly stolen from http://stackoverflow.com/questions/3642806/how-to-determine-and-check-whether-a-type-in-assembly-is-custom-type-or-primitive
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if [is framework type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Ditto.Internal.ListPropertyBinder">
            <summary>
            Binds properties of <c>IList</c> with appropraite element mappings
            </summary>
        </member>
        <member name="T:Ditto.IConfigureDestination`1">
            <summary>
            The primary interface for starting configuration on a destination of <typeparamref name="TDest"/>
            </summary>
            <typeparam name="TDest">The type of the dest.</typeparam>
        </member>
        <member name="M:Ditto.IConfigureDestination`1.From(System.Type[])">
            <summary>
            Provide all the types which will provide data for this <c>destination</c> of <typeparamref name="TDest"/>.
            </summary>
            <param name="sourceTypes">The source types.</param>
            <returns></returns>
        </member>
        <member name="T:Ditto.ISourcedDestinationConfiguration`1">
            <summary>
            Configuration for <typeparamref name="TDest"/> based on a specific source type
            </summary>
            <typeparam name="TDest">The type of the dest.</typeparam>
        </member>
        <member name="M:Ditto.ISourcedDestinationConfiguration`1.Redirecting``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Redirects <paramref name="sourceProperty"/> value to <paramref name="destinationProperty"/>. 
            This works for component (custom type) properties, too.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="sourceProperty">The source property.</param>
            <param name="destinationProperty">The destination property.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.ISourcedDestinationConfiguration`1.Redirecting``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Ditto.ISourcedDestinationConfiguration{``1}})">
            <summary>
            Redirects <paramref name="sourceProperty"/> value to <paramref name="destinationProperty"/> where each are different types and you want to provide a nested config.
            This nested config is also validated by <c>ditto</c>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TNest">The type of the nest.</typeparam>
            <param name="sourceProperty">The source property.</param>
            <param name="destinationProperty">The destination property.</param>
            <param name="nestedCfg">The nested CFG.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.ISourcedDestinationConfiguration`1.UsingValue``1(System.Object,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Simply provide static value to be used each time for any of the <paramref name="destinationProperties"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="value">The value.</param>
            <param name="destinationProperties">The destination properties.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.ISourcedDestinationConfiguration`1.ApplyingConvention(Ditto.IResolveValue,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Applies convention regardless of the source type being used in execution.
            </summary>
            <param name="resolver">The resolver.</param>
            <param name="destinationProperties">The destination properties.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.ISourcedDestinationConfiguration`1.Toggling(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Ditto.Internal.IToggle{`0}})">
            <summary>
            Toggles <c>bool</c> properties <c>true</c>/<c>false</c> based on events being resolved.
            </summary>
            <param name="destinationProperty">The destination property.</param>
            <param name="toggle">The toggle.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.ISourcedDestinationConfiguration`1.Transforming``1(System.Func{``0,System.Object},System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Transforms the full source declaring object into the <paramref name="destinationProperties"/>. 
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="destinationProperties">The destination properties.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.ISourcedDestinationConfiguration`1.Resolving``1(Ditto.IResolveValue,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Provide your own <paramref name="resolver"/> for these <paramref name="destinationProperties"/>.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="resolver">The resolver.</param>
            <param name="destinationProperties">The destination properties.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.ISourcedDestinationConfiguration`1.Nesting``2(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{Ditto.ISourcedDestinationConfiguration{``1}})">
            <summary>
            Provide another configuration for a nested component. This is not necesary for you to do if you have already configure your nested component elsewhere since everything is bound together
            before validation and execution. This is typically used for 'unflattening' a source object into a nested component on the destination.
            TODO : This behavior needs to be confirmed that it is not overriden by framework
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TNest">The type of the nest.</typeparam>
            <param name="destinationProperty">The destination property.</param>
            <param name="sourceConfig">The source config.</param>
            <returns></returns>
        </member>
        <member name="T:Ditto.IConfigureDestination">
            <summary>
            The primary interface for starting configuration on a destination type
            </summary>
        </member>
        <member name="M:Ditto.IConfigureDestination.From(System.Type[])">
            <summary>
            Provide all the types which will provide data for this <c>destination</c> type.
            </summary>
            <param name="sourceTypes">The source types.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.IConfigureDestination.SetPropertyResolver(Ditto.IPropertyCriterion,System.Type,Ditto.IResolveValue)">
            <summary>
            Sets the property resolver based on the <paramref name="sourceType"/> being resolved from.
            </summary>
            <param name="destinationPropertyCriterion">The destination property criterion.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:Ditto.IConfigureDestination.ApplyingConvention(Ditto.IPropertyCriterion,Ditto.IResolveValue)">
            <summary>
            Apply the resolver according to the <paramref name="propertyCriterion"/> convention.
            </summary>
            <param name="propertyCriterion">The property criterion.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="T:Ditto.ISourcedDestinationConfiguration">
            <summary>
            Configuration based on a specific source type
            </summary>
        </member>
        <member name="M:Ditto.ISourcedDestinationConfiguration.ApplyingConvention(Ditto.IPropertyCriterion,Ditto.IResolveValue)">
            <summary>
            Applies convention regardless of the source type being used in execution.
            </summary>
            <param name="destinationPropertyCriterion">The destination property criterion.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="T:Ditto.Internal.SourcedPropertyNameResolver">
            <summary>
            Same as <c>PropertyNameResolver</c> only allows reachability for caching.
            </summary>
        </member>
        <member name="T:Ditto.Resolvers.StaticValueResolver">
            <summary>
            Always resolve using the provided <para>value</para>.
            </summary>
        </member>
        <member name="T:Ditto.Resolvers.ImmutableDestinationResolver">
            <summary>
              This resolver won't overwrite a destination value if one exists. It first checks for the default value by the field's Type to determine
              if it should resolve. If it <i>is</i> resolvable (destination has a default value), then it uses the wrapped (<b>inner</b>) resolver for resolution; otherwise, 
              it gets <c>Result.Unresolved</c>.
              <seealso cref="F:Ditto.Internal.Result.Unresolved">Result.Unresolved</seealso>
              <seealso cref="M:Ditto.InternalTypeExtensions.DefaultValue(System.Type)">DefaultValue extension</seealso>
            </summary>
        </member>
        <member name="T:Ditto.Reflect">
            <summary>
            Helper for simplifying lamba access to members
            http://blog.andreloker.de/post/2008/06/Getting-rid-of-strings-(2)-use-lambda-expressions.aspx
            </summary>
        </member>
        <member name="M:Ditto.Reflect.GetMethod``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets the MethodInfo for the method that is called in the provided <paramref name="expression"/>
            </summary>
            <example>
            <code>
            public class HomeController : SmartDispatcherController {
            public void Index() {
            // RedirectToAction("Login");
            this.RedirectToAction(c =&gt; c.Login());
            }
            public void Login(){ }
            }
            </code>
            </example>
            <typeparam name="TClass">The type of the class.</typeparam>
            <param name="expression">The expression.</param>
            <returns>Method info</returns>
            <exception cref="T:System.ArgumentException">The provided expression is not a method call</exception>
        </member>
        <member name="M:Ditto.Reflect.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Gets the property for the call in the provided <paramref name="expression"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            var dayProperty = Reflect.GetProperty<DateTime>(dt => dt.Day);
            //OR
            var dayProperty = Reflect.GetProperty( (DateTime dt) => dt.Day);
            ]]>
            </code>
            </example> 
            <typeparam name="TClass">The type of the class.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.Reflect.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the property for the call in the provided <paramref name="expression"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            var dayProperty = Reflect.GetProperty<DateTime>(dt => dt.Day);
            //OR
            var dayProperty = Reflect.GetProperty( (DateTime dt) => dt.Day);
            ]]>
            </code>
            </example> 
            <typeparam name="TClass">The type of the class.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.Reflect.GetFieldAccessor``2(System.String)">
            <summary>
            Gets the field accessor.
            http://rogeralsing.com/2008/02/26/linq-expressions-access-private-fields/
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="R"></typeparam>
            <param name="fieldName">Name of the field.</param>
            <returns></returns>
        </member>
        <member name="T:Ditto.AbstractMappingConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Ditto.AbstractMappingConfiguration.Cfg">
            <summary>
            Injected cfg
            </summary>
            <value>The CFG.</value>
        </member>
        <member name="T:Ditto.Resolvers.PropertyNameResolver">
            <summary>
            Resolved based on the provided source property name. 
            </summary>
        </member>
        <member name="T:Ditto.Resolvers.LambdaResolver`1">
            <summary>
            
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
        </member>
        <member name="T:Ditto.Resolvers.DefaultValueResolver">
            <summary>
            Set destination property to its default value, based on the <c>PropertyType</c>
            </summary>
        </member>
        <member name="T:Ditto.Internal.IResolutionContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:Ditto.Internal.IResolutionContext.BuildValueAssignment(Ditto.Internal.IDescribeMappableProperty)">
            <summary>
            Used by <c>ditto </c> to prepare the destination property for value assignment during execution.
            </summary>
            <param name="destinationProperty">The destination property.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.Internal.IResolutionContext.Nested(Ditto.Internal.IDescribeMappableProperty)">
            <summary>
            Nests this context only on the provided <paramref name="destinationProperty"/>. The source declaring object remains the same in the resulting context.
            </summary>
            <param name="destinationProperty">The destination property.</param>
            <returns></returns>
        </member>
        <member name="M:Ditto.Internal.IResolutionContext.Nested(Ditto.Internal.IDescribeMappableProperty,Ditto.Internal.IDescribeMappableProperty)">
            <summary>
            Nests this context on both the destination and source properties. 
            </summary>
            <param name="destinationProperty">The destination property.</param>
            <param name="sourceProperty">The source property.</param>
            <returns></returns>
        </member>
        <member name="P:Ditto.Internal.IResolutionContext.SourceType">
            <summary>
            Gets the type of the source for current resolution.
            </summary>
            <value>The type of the source.</value>
        </member>
        <member name="P:Ditto.Internal.IResolutionContext.Source">
            <summary>
            Gets the source object. Note this the whole source object, not just its property value.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Ditto.Internal.IResolutionContext.Destination">
            <summary>
            Gets the destination. This is the declaring object for the resulting value, not the destination property itself.
            </summary>
            <value>The destination.</value>
        </member>
        <member name="T:Ditto.Internal.BindableConfiguration">
            <summary>
              Intermediate representation of configuration which provide the executable mapping, as well as validation and caching hooks.
            </summary>
        </member>
        <member name="T:Ditto.Internal.SelfBinder">
            <summary>
            Ensures bindable configuration is bound
            </summary>
        </member>
        <member name="T:Ditto.Resolvers.IgnoreResolver">
            <summary>
            Does nothing. It is important to note that the resolution is considered to be <c>Result.Unresolved</c>.
            </summary>
        </member>
        <member name="M:Ditto.MissingProperties.Merge(System.Collections.Generic.IEnumerable{Ditto.Internal.IDescribeMappableProperty})">
            <summary>
            Be certain to replace the reference when calling this method (see Example).
            Merges the specified other, returning a new instance.
            </summary>
            <example>
            var missing = missing.Merge(otherMissing);
            </example>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
    </members>
</doc>
